{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport firebase from 'firebase';\nimport { Subject } from 'rxjs';\nlet AuthService = class AuthService {\n  constructor(afs, afAuth, storage, router) {\n    this.afs = afs;\n    this.afAuth = afAuth;\n    this.storage = storage;\n    this.router = router;\n    this.currentUser = new Subject();\n    this.currentToken = null;\n    this.afAuth.setPersistence(firebase.auth.Auth.Persistence.SESSION);\n    this.afAuth.authState.subscribe(user => {\n      var _a;\n\n      (_a = this.currentUser) === null || _a === void 0 ? void 0 : _a.next(user);\n      user === null || user === void 0 ? void 0 : user.getIdToken().then(token => this.currentToken = token);\n    });\n  }\n\n  signIn(email, password) {\n    return this.afAuth.signInWithEmailAndPassword(email, password).then(result => {\n      if (!result.user) {\n        return;\n      }\n\n      this.router.navigateByUrl('/');\n    }).catch(e => console.error(e));\n  }\n\n  signOut() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.afAuth.signOut();\n      this.router.navigateByUrl('/auth');\n    });\n  }\n\n  updateUser(user) {\n    const userRef = this.afs.doc(`user/${user.uid}`);\n    const userData = {\n      uid: user.uid,\n      email: user.email || '',\n      displayName: user.displayName || 'Anonymous',\n      photoURL: user.photoURL || '',\n      emailVerified: user.emailVerified\n    };\n    return userRef.set(userData, {\n      merge: true\n    });\n  }\n\n};\nAuthService = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthService);\nexport { AuthService };","map":null,"metadata":{},"sourceType":"module"}