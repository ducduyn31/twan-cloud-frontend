{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\nimport { switchMap, tap } from 'rxjs/operators';\nimport { DetailPageComponent } from '../../pages/detail-page/detail-page.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../network/network-member/network-member.service\";\n\nfunction AddDeviceComponent_mat_list_item_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-list-item\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const member_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"cdkDragData\", member_r4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(member_r4.vpnid);\n  }\n}\n\nfunction AddDeviceComponent_mat_list_item_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-list-item\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const member_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"cdkDragData\", member_r5);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(member_r5.sn || member_r5.vpnid);\n  }\n}\n\nfunction AddDeviceComponent_mat_list_item_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-list-item\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const member_r6 = ctx.$implicit;\n    i0.ɵɵproperty(\"cdkDragData\", member_r6);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(member_r6.sn);\n  }\n}\n\nfunction AddDeviceComponent_mat_list_item_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-list-item\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const member_r7 = ctx.$implicit;\n    i0.ɵɵproperty(\"cdkDragData\", member_r7);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(member_r7.sn || member_r7.vpnid);\n  }\n}\n\nconst _c0 = function () {\n  return [\"server-list\", \"edge-list\", \"mesh-list\"];\n};\n\nconst _c1 = function () {\n  return [\"server-list\", \"hardware-list\", \"edge-list\", \"mesh-list\"];\n};\n\nconst _c2 = function () {\n  return [\"hardware-list\", \"edge-list\", \"mesh-list\"];\n};\n\nexport let AddDeviceComponent = /*#__PURE__*/(() => {\n  class AddDeviceComponent {\n    constructor(data, networkMemberService) {\n      this.data = data;\n      this.networkMemberService = networkMemberService;\n      this.hardwareList = [];\n      this.nonNetworkedHardwareList = [];\n      this.serverList = [];\n      this.nonNetworkedServerList = [];\n      this.edgeList = [];\n      this.meshList = [];\n      this.edgeActionQueue = new Map();\n      this.meshActionQueue = new Map();\n    }\n\n    static insertAction(map, action, id) {\n      // @ts-ignore\n      if (!map.has(id) || map.get(id).count === 0) {\n        map.set(id, {\n          action,\n          count: 1\n        });\n      } else {\n        // @ts-ignore\n        const prev = map.get(id).count; // @ts-ignore\n\n        if (map.get(id).action === action) {\n          map.set(id, {\n            action,\n            count: prev + 1\n          });\n        } else {\n          map.set(id, {\n            action,\n            count: prev - 1\n          });\n        }\n      }\n    }\n\n    ngOnInit() {\n      this.updateMembers();\n    }\n\n    updateMembers() {\n      this.networkMemberService.getAllMembers().pipe(tap(memberList => {\n        const allHardware = memberList.filter(member => 'sn' in member);\n        const allServers = memberList.filter(member => 'vpnid' in member && member.vpnid.startsWith('S'));\n        this.hardwareList = allHardware;\n        this.serverList = allServers;\n        this.nonNetworkedServerList = this.serverList.filter(s => !s.isnetworked);\n        this.nonNetworkedHardwareList = this.hardwareList.filter(s => !s.isnetworked);\n      }), switchMap(memberList => this.networkMemberService.getNetworkMembers(this.data.networkId).pipe(tap(membersInNetwork => {\n        const idsInMesh = membersInNetwork.filter(m => m.clienttype === 1).map(m => m.member);\n        const idsInEdges = membersInNetwork.filter(m => m.clienttype === 0).map(m => m.member);\n        const hardwareInMesh = memberList.filter(member => 'sn' in member && idsInMesh.includes(member.sn)) // @ts-ignore\n        .map(member => this.hardwareList.splice(this.hardwareList.findIndex(hw => hw.sn === member.sn), 1)[0]);\n        const serverInMesh = memberList.filter(member => 'vpnid' in member && idsInMesh.includes(member.vpnid)).map(member => {\n          // @ts-ignore\n          return this.serverList.splice(this.serverList.findIndex(sv => sv.vpnid === member.vpnid), 1)[0];\n        });\n        const hardwareInEdges = memberList.filter(member => 'sn' in member && idsInEdges.includes(member.sn)) // @ts-ignore\n        .map(member => this.hardwareList.splice(this.hardwareList.findIndex(hw => hw.sn === member.sn), 1)[0]);\n        const serverInEdges = memberList.filter(member => 'vpnid' in member && idsInEdges.includes(member.vpnid)) // @ts-ignore\n        .map(member => this.serverList.splice(this.serverList.findIndex(sv => sv.vpnid === member.vpnid), 1)[0]);\n        this.edgeList = [...serverInEdges, ...hardwareInEdges];\n        this.meshList = [...serverInMesh, ...hardwareInMesh];\n      })))).subscribe();\n    }\n\n    drop(event) {\n      if (event.previousContainer === event.container) {\n        moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n      } else {\n        transferArrayItem(event.previousContainer.data, event.container.data, event.previousIndex, event.currentIndex);\n\n        if (event.previousContainer.id === 'edge-list') {\n          AddDeviceComponent.insertAction(this.edgeActionQueue, 'remove', event.item.data.sn || event.item.data.vpnid);\n        } else if (event.previousContainer.id === 'mesh-list') {\n          AddDeviceComponent.insertAction(this.meshActionQueue, 'remove', event.item.data.sn || event.item.data.vpnid);\n        }\n\n        if (event.container.id === 'edge-list') {\n          AddDeviceComponent.insertAction(this.edgeActionQueue, 'add', event.item.data.sn || event.item.data.vpnid);\n        } else if (event.container.id === 'mesh-list') {\n          AddDeviceComponent.insertAction(this.meshActionQueue, 'add', event.item.data.sn || event.item.data.vpnid);\n        }\n      }\n    }\n\n    hardwarePredicate(item) {\n      return 'sn' in item.data;\n    }\n\n    serverPredicate(item) {\n      return 'vpnid' in item.data && item.data.vpnid.startsWith('S');\n    }\n\n    save() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const edgeKeys = Array.from(this.edgeActionQueue.keys());\n        const queues = [];\n        edgeKeys.forEach(key => {\n          // @ts-ignore\n          if (this.edgeActionQueue.get(key).count > 0) {\n            // @ts-ignore\n            if (this.edgeActionQueue.get(key).action === 'add') {\n              queues.push(this.networkMemberService.addToNetwork(key, +this.data.networkId, false));\n            } else {\n              queues.push(this.networkMemberService.removeFromNetwork(key, +this.data.networkId));\n            }\n          }\n        });\n\n        for (const ob of queues) {\n          ob.subscribe();\n          yield new Promise(resolve => setTimeout(resolve, 200));\n        }\n\n        DetailPageComponent.$reloadPageSignal.next(+this.data.networkId);\n      });\n    }\n\n  }\n\n  AddDeviceComponent.ɵfac = function AddDeviceComponent_Factory(t) {\n    return new (t || AddDeviceComponent)(i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i1.NetworkMemberService));\n  };\n\n  AddDeviceComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddDeviceComponent,\n    selectors: [[\"app-add-device\"]],\n    decls: 37,\n    vars: 20,\n    consts: [[1, \"container\"], [1, \"header\"], [\"mat-button\", \"\", \"mat-dialog-close\", \"\"], [\"cols\", \"2\", \"rowHeight\", \"200px\", \"gutterSize\", \"20px\", 1, \"content-wrapper\"], [1, \"tile-content\"], [1, \"tile-content__title\"], [\"id\", \"server-list\", \"cdkDropList\", \"\", 1, \"member-list\", 3, \"cdkDropListData\", \"cdkDropListConnectedTo\", \"cdkDropListEnterPredicate\", \"cdkDropListDropped\"], [\"class\", \"member-item mat-elevation-z3\", \"cdkDrag\", \"\", 3, \"cdkDragData\", 4, \"ngFor\", \"ngForOf\"], [\"cdkDropList\", \"\", \"id\", \"mesh-list\", 1, \"member-list\", 3, \"cdkDropListData\", \"cdkDropListConnectedTo\", \"cdkDropListDropped\"], [\"cdkDropList\", \"\", \"id\", \"hardware-list\", 1, \"member-list\", 3, \"cdkDropListData\", \"cdkDropListConnectedTo\", \"cdkDropListEnterPredicate\", \"cdkDropListDropped\"], [\"cdkDropList\", \"\", \"id\", \"edge-list\", 1, \"member-list\", 3, \"cdkDropListData\", \"cdkDropListConnectedTo\", \"cdkDropListDropped\"], [\"align\", \"end\"], [\"mat-raised-button\", \"\", 3, \"mat-dialog-close\", \"click\"], [\"cdkDrag\", \"\", 1, \"member-item\", \"mat-elevation-z3\", 3, \"cdkDragData\"]],\n    template: function AddDeviceComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"p\");\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"button\", 2);\n        i0.ɵɵelementStart(5, \"mat-icon\");\n        i0.ɵɵtext(6, \"close\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"mat-grid-list\", 3);\n        i0.ɵɵelementStart(8, \"mat-grid-tile\");\n        i0.ɵɵelementStart(9, \"div\", 4);\n        i0.ɵɵelementStart(10, \"div\", 5);\n        i0.ɵɵtext(11, \"Server Member(s)\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"mat-list\", 6);\n        i0.ɵɵlistener(\"cdkDropListDropped\", function AddDeviceComponent_Template_mat_list_cdkDropListDropped_12_listener($event) {\n          return ctx.drop($event);\n        });\n        i0.ɵɵtemplate(13, AddDeviceComponent_mat_list_item_13_Template, 2, 2, \"mat-list-item\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"mat-grid-tile\");\n        i0.ɵɵelementStart(15, \"div\", 4);\n        i0.ɵɵelementStart(16, \"div\", 5);\n        i0.ɵɵtext(17, \"Mesh Cluster(s)\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"mat-list\", 8);\n        i0.ɵɵlistener(\"cdkDropListDropped\", function AddDeviceComponent_Template_mat_list_cdkDropListDropped_18_listener($event) {\n          return ctx.drop($event);\n        });\n        i0.ɵɵtemplate(19, AddDeviceComponent_mat_list_item_19_Template, 2, 2, \"mat-list-item\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"mat-grid-tile\");\n        i0.ɵɵelementStart(21, \"div\", 4);\n        i0.ɵɵelementStart(22, \"div\", 5);\n        i0.ɵɵtext(23, \"Hardware Member(s)\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"mat-list\", 9);\n        i0.ɵɵlistener(\"cdkDropListDropped\", function AddDeviceComponent_Template_mat_list_cdkDropListDropped_24_listener($event) {\n          return ctx.drop($event);\n        });\n        i0.ɵɵtemplate(25, AddDeviceComponent_mat_list_item_25_Template, 2, 2, \"mat-list-item\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"mat-grid-tile\");\n        i0.ɵɵelementStart(27, \"div\", 4);\n        i0.ɵɵelementStart(28, \"div\", 5);\n        i0.ɵɵtext(29, \"Network Member(s)\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(30, \"mat-list\", 10);\n        i0.ɵɵlistener(\"cdkDropListDropped\", function AddDeviceComponent_Template_mat_list_cdkDropListDropped_30_listener($event) {\n          return ctx.drop($event);\n        });\n        i0.ɵɵtemplate(31, AddDeviceComponent_mat_list_item_31_Template, 2, 2, \"mat-list-item\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(32, \"mat-dialog-actions\", 11);\n        i0.ɵɵelementStart(33, \"button\", 2);\n        i0.ɵɵtext(34, \"Cancel\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(35, \"button\", 12);\n        i0.ɵɵlistener(\"click\", function AddDeviceComponent_Template_button_click_35_listener() {\n          return ctx.save();\n        });\n        i0.ɵɵtext(36, \"Save\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\"Network ID: \", ctx.data.networkId, \"\");\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"cdkDropListData\", ctx.serverList)(\"cdkDropListConnectedTo\", i0.ɵɵpureFunction0(16, _c0))(\"cdkDropListEnterPredicate\", ctx.serverPredicate);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.serverList);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"cdkDropListData\", ctx.meshList)(\"cdkDropListConnectedTo\", i0.ɵɵpureFunction0(17, _c1));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.meshList);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"cdkDropListData\", ctx.hardwareList)(\"cdkDropListConnectedTo\", i0.ɵɵpureFunction0(18, _c2))(\"cdkDropListEnterPredicate\", ctx.hardwarePredicate);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.hardwareList);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"cdkDropListData\", ctx.edgeList)(\"cdkDropListConnectedTo\", i0.ɵɵpureFunction0(19, _c1));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.edgeList);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"mat-dialog-close\", true);\n      }\n    },\n    styles: [\".container[_ngcontent-%COMP%]{width:60vw}.container[_ngcontent-%COMP%]   .header[_ngcontent-%COMP%]{display:flex;justify-content:space-between;flex-direction:row}.container[_ngcontent-%COMP%]   .content-wrapper[_ngcontent-%COMP%]   .tile-content[_ngcontent-%COMP%]{width:100%}.container[_ngcontent-%COMP%]   .content-wrapper[_ngcontent-%COMP%]   .member-list[_ngcontent-%COMP%]{display:flex;flex-direction:column;height:150px}\"]\n  });\n  return AddDeviceComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}