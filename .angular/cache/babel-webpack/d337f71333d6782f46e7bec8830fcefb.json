{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport firebase from 'firebase';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/firestore\";\nimport * as i2 from \"@angular/fire/auth\";\nimport * as i3 from \"../../shared/services/storage/storage.service\";\nimport * as i4 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(afs, afAuth, storage, router) {\n      this.afs = afs;\n      this.afAuth = afAuth;\n      this.storage = storage;\n      this.router = router;\n      this.currentUser = new Subject();\n      this.currentToken = null;\n      this.afAuth.setPersistence(firebase.auth.Auth.Persistence.SESSION);\n      this.afAuth.authState.subscribe(user => {\n        var _a;\n\n        (_a = this.currentUser) === null || _a === void 0 ? void 0 : _a.next(user);\n        user === null || user === void 0 ? void 0 : user.getIdToken().then(token => this.currentToken = token);\n      });\n    }\n\n    signIn(email, password) {\n      return this.afAuth.signInWithEmailAndPassword(email, password).then(result => {\n        if (!result.user) {\n          return;\n        }\n\n        this.router.navigateByUrl('/');\n      }).catch(e => console.error(e));\n    }\n\n    signOut() {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield this.afAuth.signOut();\n        this.router.navigateByUrl('/auth');\n      });\n    }\n\n    updateUser(user) {\n      const userRef = this.afs.doc(`user/${user.uid}`);\n      const userData = {\n        uid: user.uid,\n        email: user.email || '',\n        displayName: user.displayName || 'Anonymous',\n        photoURL: user.photoURL || '',\n        emailVerified: user.emailVerified\n      };\n      return userRef.set(userData, {\n        merge: true\n      });\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.AngularFireAuth), i0.ɵɵinject(i3.StorageService), i0.ɵɵinject(i4.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}